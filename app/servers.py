import json
from logger import logger
import aiofiles

HOSTS_FILE = "hosts.json"

async def load_servers_from_file(file_path):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä—ã –∏–∑ —Ñ–∞–π–ª–∞."""
    try:
        async with aiofiles.open(file_path, "r", encoding="utf-8") as file:
            contents = await file.read()
            data = json.loads(contents)
            if not isinstance(data, list):
                logger.error("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è —Å–ø–∏—Å–∫–æ–º.")
                return []
            return data
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
        return []

async def save_servers_to_file(file_path, servers):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–µ—Ä–≤–µ—Ä—ã –≤ —Ñ–∞–π–ª."""
    try:
        async with aiofiles.open(file_path, "w", encoding="utf-8") as f:
            await f.write(json.dumps(servers, indent=4))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤ –≤ —Ñ–∞–π–ª {file_path}: {e}")

def get_available_server(servers):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–µ—Ä–≤–µ—Ä"""
    for server in servers:
        if server['current_devices'] < server['max_devices']:
            return server
    return None

async def has_free_slots(servers):
    return any(server["current_devices"] < server["max_devices"] for server in servers)


async def add_device_to_host(host, change):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ."""
    try:
        async with aiofiles.open(HOSTS_FILE, "r", encoding="utf-8") as file:
            contents = await file.read()
            hosts = json.loads(contents)

        for server in hosts:
            if server["host"] == host:
                server["current_devices"] = max(0, server["current_devices"] + change)
                break
        else:
            return False  # –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω

        async with aiofiles.open(HOSTS_FILE, "w", encoding="utf-8") as file:
            await file.write(json.dumps(hosts, indent=4, ensure_ascii=False))

        return True

    except Exception as e:
        logger.error(f"üö® –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è current_devices –¥–ª—è {host}: {e}")
        return False
    
    
async def update_current_devices_in_hosts(server_usage):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–ª-–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"""
    try:
        async with aiofiles.open("hosts.json", mode="r") as file:
            content = await file.read()
            hosts = json.loads(content)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
        for server in hosts:
            host_name = server["host"]
            if host_name in server_usage:
                server["current_devices"] = server_usage[host_name]

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ hosts.json
        async with aiofiles.open("hosts.json", mode="w") as file:
            await file.write(json.dumps(hosts, indent=4, ensure_ascii=False))

        for host, count in server_usage.items():
            logger.info(f"‚úÖ –ò–∑–º–µ–Ω–µ–Ω–æ –∫–æ–ª-–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –Ω–∞ {host}: {count}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ hosts.json: {e}")