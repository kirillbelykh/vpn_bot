import asyncio
import os
import signal
from logger import logger
import locale
from payments import create_payment, get_payment_status
from datetime import datetime, timedelta
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, CallbackQuery, Message
from aiogram.types.input_file import FSInputFile
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from pony.orm import db_session, commit, count
from database import User, Subscription, Payment, get_all_data, get_user_data, clear_user_data
from keygen import generate_vpn_key, delete_vpn_key, activate_trial
from info import welcome_text, info_about_vpn, instruction
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.interval import IntervalTrigger
from servers import load_servers_from_file, has_free_slots, update_current_devices_in_hosts
from collections import defaultdict

scheduler = AsyncIOScheduler()

locale.setlocale(locale.LC_TIME, 'ru_RU.UTF-8')

load_dotenv()
TOKEN = os.getenv('TOKEN')

# Making bot
bot = Bot(token=TOKEN)
dp = Dispatcher()
# Router
router = Router()
dp.include_router(router)

# Start menu
@router.message(Command("menu"))
async def show_main_menu(message: Message):
    main_menu = await main_menu_keyboard()
    await message.answer(welcome_text, reply_markup=main_menu)

# Start menu
async def main_menu_keyboard():
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∞", callback_data="payment"),
        InlineKeyboardButton(text="üìú –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="guide")
    )
    builder.row(
        InlineKeyboardButton(text="üéÅ –†–µ—Ñ–µ—Ä–∞–ª", callback_data="referral"),
        InlineKeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="info")
    )
    builder.row(
        InlineKeyboardButton(text="üîß –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")
    )
    builder.row(
        InlineKeyboardButton(text="üîó–°–∫–∞—á–∞—Ç—å Outline", callback_data="outline"),
    )
    return builder.adjust(2, 2, 2).as_markup()

async def reply_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="üîë –ú–æ–π –∫–ª—é—á"), 
                KeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏"), 
                KeyboardButton(text="–ü—Ä–æ–±–Ω—ã–π –∫–ª—é—á")
            ]
        ],
        resize_keyboard=True  # –î–µ–ª–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –ø–æ —Ä–∞–∑–º–µ—Ä—É
    )
@router.message(F.text == "–ü—Ä–æ–±–Ω—ã–π –∫–ª—é—á")
@db_session
async def process_trial_key(message: Message):
    user_id = message.from_user.id
    user = User.get(telegram_id=user_id)
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if not user:
        await bot.send_message(user_id, "–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
        return
    
    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
    if user.subscription_end and user.subscription_end > datetime.now():
        await bot.send_message(user_id, "–í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É, VPN —Ä–∞–±–æ—Ç–∞–µ—Ç.")
        return

    if user.subscription_end and user.subscription_end <= datetime.now():
        await bot.send_message(user_id, "–í—ã —É–∂–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É. –ü—Ä–æ–±–Ω—ã–π –∫–ª—é—á –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ø—Ä–æ–±–Ω—ã–π –∫–ª—é—á
    if user.trial_used:
        await bot.send_message(user_id, "–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—ã–π –∫–ª—é—á. –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ø—Ä–æ–±–Ω—ã–π –∫–ª—é—á –∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞
    result = await activate_trial(user_id)
    
    if result:
        await bot.send_message(user_id, "–ü—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ 3 –¥–Ω—è!\n–¢–∞–ø–Ω–∏—Ç–µ, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –í–∞—à VPN-–∫–ª—é—á:")
        await message.answer(f"`{result}`", parse_mode="MarkdownV2")
    else:
        logger.error("–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –∫–ª—é—á–∞.")
        await bot.send_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –∫–ª—é—á–∞.")

# Back button
@router.callback_query(F.data == "back_to_main")
async def back_to_main_menu(callback: CallbackQuery):
    main_menu = await main_menu_keyboard()
    await callback.message.edit_text(welcome_text, reply_markup=main_menu)

# Start command 
@router.message(Command("start"))
@db_session
async def welcome_message(message: Message):
    logger.info(f"–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç... {message.chat.username}")
    # Get ref code
    ref_code = message.text.split()[-1] if len(message.text.split()) > 1 else None
    username = message.from_user.username
    user = await create_user_if_not_exists(message.chat.id, username, ref_code)

    # Append ref code
    if ref_code:
        inviter = User.get(referral_code=ref_code)
        if inviter:
            user.referred_by = str(inviter.telegram_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ
    commit()
    main_menu = await main_menu_keyboard()
    # Welcome text + buttons
    reply_kb = await reply_keyboard()
    await message.answer(welcome_text, reply_markup=main_menu)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ ‚¨ÜÔ∏è‚¨ÜÔ∏è‚¨ÜÔ∏è", reply_markup=reply_kb)

# Packet choice
async def payment_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="1 –º–µ—Å—è—Ü - 149‚ÇΩ", callback_data="1_month")],
        [InlineKeyboardButton(text="3 –º–µ—Å—è—Ü–∞ - 399‚ÇΩ", callback_data="3_months")],
        [InlineKeyboardButton(text="6 –º–µ—Å—è—Ü–µ–≤ - 799‚ÇΩ", callback_data="6_months")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])

# Handling payment button
@router.callback_query(F.data == "payment")
async def show_payment_menu(callback: CallbackQuery):
    pay_menu = await payment_menu()
    await callback.message.edit_text("üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:", reply_markup=pay_menu)

@router.callback_query(F.data.in_(["1_month", "3_months", "6_months"]))
async def handle_subscription(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –ø–µ—Ä–µ–¥–∞—ë—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ `process_subscription`."""
    await callback.answer()
    await process_subscription(callback)

async def process_subscription(callback: CallbackQuery):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–ø–∏—Å–∫–∏ –∏ —Å–æ–∑–¥–∞—ë—Ç –ø–ª–∞—Ç—ë–∂–Ω—É—é —Å—Å—ã–ª–∫—É."""
    user_id = callback.from_user.id
    await callback.message.edit_reply_markup(reply_markup=None)

    # –í—ã–±–∏—Ä–∞–µ–º —Ü–µ–Ω—É –∏ –¥–Ω–∏ –ø–æ –∫–æ–ª–±—ç–∫—É
    subscription_options = {
        "1_month": (149, 30),
        "3_months": (399, 90),
        "6_months": (799, 182),
    }
    amount, days = subscription_options.get(callback.data, (None, None))
    
    if not amount or not days:
        await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–¥–ø–∏—Å–∫–∏.")
        return

    with db_session:
        user = User.get(telegram_id=user_id)
        if not user or not user.started:
            await callback.message.answer("–í—ã –¥–æ–ª–∂–Ω—ã —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–∞—Ç—å /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
            return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—Å—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    servers = await load_servers_from_file('hosts.json')
    if not await has_free_slots(servers):
        await callback.message.answer("‚ùå –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö. –ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞—Ç—ë–∂–Ω—É—é —Å—Å—ã–ª–∫—É
    payment_url, payment_id = await generate_payment_link(user_id, amount, days)
    if not payment_url or not payment_id:
        await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–ª–∞—Ç—ë–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ üí≥", url=payment_url)],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="payment")]
    ])
    payment_message = await callback.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:", reply_markup=markup)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã
    await check_payment_status(user_id, payment_id, days, amount, payment_message.message_id)
    
async def generate_payment_link(user_id: int, amount: int, days: int):
    """–°–æ–∑–¥–∞—ë—Ç –ø–ª–∞—Ç—ë–∂–Ω—É—é —Å—Å—ã–ª–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –∏ ID –ø–ª–∞—Ç–µ–∂–∞."""
    try:
        payment_url, payment_id = await create_payment(amount, f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {days} –¥–Ω–µ–π", user_id)
        if payment_url and payment_id:
            logger.info(f"‚úÖ –ü–ª–∞—Ç—ë–∂–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {payment_url}")
            return payment_url, payment_id
        else:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–∞!")
            return None, None
    except Exception as e:
        logger.error(f"üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        return None, None

async def check_payment_status(user_id, payment_id, days, amount, payment_message, timeout=600, check_interval=10):
    start_time = datetime.now()
    while True:
        try:
            status = await get_payment_status(payment_id)
            if status == "succeeded":
                with db_session:
                    user = User.get(telegram_id=user_id)
                    if user:
                        logger.info("–ó–∞–Ω–æ—Å–∏–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î...")
                        await bot.delete_message(user_id, payment_message)
                        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
                        active_subscription = Subscription.get(user=user, status="Active")

                        # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞, –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –µ—ë
                        if active_subscription and active_subscription.end_date > datetime.now():
                            logger.info("–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞, –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –µ—ë...")
                            active_subscription.end_date += timedelta(days=days)
                            user.subscription_end = active_subscription.end_date
                            is_new_subscription = False
                        elif active_subscription and active_subscription.end_date <= datetime.now():
                            logger.info("–ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É")
                            active_subscription.end_date += timedelta(days=days)
                            user.subscription_end = active_subscription.end_date
                            is_new_subscription = False
                        else:
                            # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é
                            logger.info("–°–æ–∑–¥–∞—é –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É")
                            now = datetime.now()
                            user.subscription_end = now + timedelta(days=days)  # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è
                            logger.info(f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {user.subscription_end}")
                            active_subscription = Subscription(
                                user=user,
                                start_date=now,
                                end_date=user.subscription_end,
                                amount=amount,
                                status="Active",
                            )
                            is_new_subscription = True

                        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂
                        payment = Payment(
                            id=payment_id,
                            user=user,
                            amount=amount,
                            payment_date=datetime.now(),
                            status=status
                        )

                        if payment.id:
                            user.last_payment_id = str(payment.id)
                            logger.info("–ü–ª–∞—Ç–µ–∂ –±—ã–ª –∑–∞–Ω–µ—Å–µ–Ω –≤ –ë–î")
                            
                        commit()

                        formatted_date = user.subscription_end.strftime("%d %B %Y")

                        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞, –µ—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∏–ª–∏ –∫–ª—é—á –±—ã–ª —É–¥–∞–ª—ë–Ω
                        if is_new_subscription:
                            logger.info("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π VPN-–∫–ª—é—á...")
                            if user.trial_end_date and user.trial_end_date > datetime.now():
                                    user.trial_end_date = datetime.now()
                                    logger.info(f"–£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–Ω—ã–π –∫–ª—é—á {user.key_id}")
                                    await delete_vpn_key(user.key_id)
                                    
                            result = await generate_vpn_key(user_id)

                            if result:
                                user.trial_used = True
                                logger.info("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –Ω–æ–≤—ã–π –∫–ª—é—á")
                                dynamic_key = result
                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª—é—á–æ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫–æ–¥–∞
                                await bot.send_message(user_id, "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –¢–∞–ø–Ω–∏—Ç–µ, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –í–∞—à VPN-–∫–ª—é—á:")
                                await bot.send_message(user_id, text=f"`{dynamic_key}`", parse_mode="MarkdownV2")
                            else:
                                logger.error("–û—à–∏–±–∫–∞: generate_vpn_key() –≤–µ—Ä–Ω—É–ª None!")
                                await bot.send_message(user_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ VPN-–∫–ª—é—á–∞. –ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @vpnstalker.")
                        elif not user.access_key:
                            logger.info("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–ª—é—á –ø–æ—Å–ª–µ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∑–∞–∫–æ–Ω—á–∏–≤—à–µ–π—Å—è –ø–æ–¥–ø–∏—Å–∫–∏")
                            result = await generate_vpn_key(user_id)
                            if result:
                                dynamic_key = result
                                await bot.send_message(user_id, "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –í–∞—à VPN-–∫–ª—é—á –∞–∫—Ç–∏–≤–µ–Ω!")
                        else:
                            await bot.send_message(user_id, f"üìÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –æ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {formatted_date}\n–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ Outline –∏ –ø–æ–¥–∫–ª—é—á–∞–π—Ç–µ—Å—å!")

                        break
            
            elapsed_time = (datetime.now() - start_time).total_seconds()
            if elapsed_time > timeout:
                await bot.send_message(user_id, "‚è≥ –í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

            await asyncio.sleep(check_interval)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {e}")
            await bot.send_message(user_id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            break

async def check_subscriptions():
    try:
        server_usage = defaultdict(int)  # –•—Ä–∞–Ω–∏–º —á–∏—Å–ª–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –∫–∞–∂–¥–æ–º —Å–µ—Ä–≤–µ—Ä–µ

        with db_session:
            for user in User.select():  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä, –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ—Ö –≤ –ø–∞–º—è—Ç—å
                logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}...")

                # 1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
                if user.trial_used and user.trial_end_date and not user.subscription_end:
                    trial_hours_left = (user.trial_end_date - datetime.now()).total_seconds() / 3600  

                    if trial_hours_left <= 0:
                        logger.info("–ü—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∏ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å")

                        if user.key_id:
                            delete_key = await delete_vpn_key(user.key_id)

                            with db_session:
                                u = User.get(telegram_id=user.telegram_id)
                                if u:
                                    u.key_id = None  # –û—á–∏—â–∞–µ–º VPN-–∫–ª—é—á
                                    commit()

                            if delete_key:
                                logger.info(f"‚úÖ –ü—Ä–æ–±–Ω—ã–π –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id} –±—ã–ª —É–¥–∞–ª–µ–Ω.")
                                await bot.send_message(
                                    user.telegram_id,
                                    "‚è≥ –ü—Ä–æ–±–Ω—ã–π –∫–ª—é—á –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è VPN."
                                )
                            else:
                                logger.warning(f"‚ö† –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–±–Ω–æ–≥–æ –∫–ª—é—á–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}.")

                # 2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ã—á–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
                if user.subscription_end and user.key_id:
                    sub_hours_left = (user.subscription_end - datetime.now()).total_seconds() / 3600  

                    if sub_hours_left <= 0:
                        delete_key = await delete_vpn_key(user.key_id)

                        with db_session:
                            u = User.get(telegram_id=user.telegram_id)
                            if u:
                                u.key_id = None  # –û—á–∏—â–∞–µ–º VPN-–∫–ª—é—á
                                commit()

                        if delete_key:
                            logger.info(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id} –∏—Å—Ç–µ–∫–ª–∞, –∫–ª—é—á —É–¥–∞–ª—ë–Ω.")
                            await bot.send_message(
                                user.telegram_id,
                                "‚ùå –°—Ä–æ–∫ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å—Ç—ë–∫.\n–ü—Ä–æ–¥–ª–∏—Ç–µ –µ—ë, —á—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è VPN."
                            )
                        else:
                            logger.warning(f"‚ö† –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª—é—á–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}.")

                    elif 0 < sub_hours_left <= 72:
                        await bot.send_message(
                            user.telegram_id,
                            f"‚ö† –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {int(sub_hours_left // 24)} –¥–Ω—è "
                            f"({user.subscription_end.strftime('%d %B %Y')}).\n–û–ø–ª–∞—Ç–∏—Ç–µ –∑–∞—Ä–∞–Ω–µ–µ, –∏ –¥–Ω–∏ –ø—Ä–∏–±–∞–≤—è—Ç—Å—è –∫ –æ—Å—Ç–∞—Ç–∫—É!"
                        )

                # 3Ô∏è‚É£ –£—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                if user.host:
                    server_usage[user.host] += 1

        logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    except Exception as e:
        logger.error(f"üö® –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")

    await update_current_devices_in_hosts(server_usage)  # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞

async def send_notification():
    try:
        with db_session:
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —É—Ä–æ–≤–Ω–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            users = User.select(lambda u: not u.trial_used and not u.subscription_end)
            
            for user in users:
                await bot.send_message(
                    user.telegram_id, 
                    "–ï—â–µ –Ω–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞–ª–∏? –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É **–ü—Ä–æ–±–Ω—ã–π –∫–ª—é—á** –∏ –∏—Å–ø—ã—Ç–∞–π—Ç–µ\n—Å–∫–æ—Ä–æ—Å—Ç—å –Ω–∞—à–µ–≥–æ VPN –∑–∞ 24 —á–∞—Å–∞!", 
                    parse_mode="MarkdownV2"
                )
                
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –Ω–æ–≤—ã—Ö —é–∑–µ—Ä–æ–≤: {e}")
        
def get_next_20():
    now = datetime.now()
    today_20 = now.replace(hour=20, minute=0, second=0, microsecond=0)
    return today_20 if now <= today_20 else today_20 + timedelta(days=1)
        

# Scheduler
def start_scheduler():
    scheduler.add_job(check_subscriptions, IntervalTrigger(hours=3), replace_existing=True)
    scheduler.add_job(send_notification, IntervalTrigger(days=2, start_date=get_next_20()), id="send_notification_job", replace_existing=True)
    logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω.")

def stop_scheduler():
    scheduler.shutdown()
    logger.info("‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

async def create_user_if_not_exists(telegram_id, username, ref_code=None):
    user = User.get(telegram_id=telegram_id)
    if not user:
        logger.info(f"–°–æ–∑–¥–∞—é –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")
        inviter = User.get(referral_code=ref_code) if ref_code else None

        if ref_code and not inviter:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω–≤–∞–π—Ç–µ—Ä–∞ —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º {ref_code}.")

        # Create user
        new_user = User(
            telegram_id=telegram_id,
            username=username,
            started=True,
            referral_code=f"ref{telegram_id}",
            referred_by=inviter if isinstance(inviter, User) else None,
            created_at=datetime.now()
        )

        return new_user

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    return user


@router.message(F.text == "üîë –ú–æ–π –∫–ª—é—á")
async def show_my_keys(message: Message):
    user_id = message.from_user.id
    with db_session:
        user = User.get(telegram_id=user_id)
        if user:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ subscription_end –∏ trial_end_date –Ω–µ —Ä–∞–≤–Ω—ã None
            if user.dynamic_key:
                if user.subscription_end and user.subscription_end > datetime.now():
                    key = user.dynamic_key
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª—é—á –∫–∞–∫ –∫–æ–¥
                    await message.answer("–¢–∞–ø–Ω–∏—Ç–µ, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å")
                    await message.answer(f"`{key}`", parse_mode="MarkdownV2")
                elif user.trial_end_date and user.trial_end_date > datetime.now():
                    key = user.dynamic_key
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª—é—á –∫–∞–∫ –∫–æ–¥
                    await message.answer("–¢–∞–ø–Ω–∏—Ç–µ, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å")
                    await message.answer(f"`{key}`", parse_mode="MarkdownV2")
                else:
                    await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞.")
            else:
                await message.answer("–£ –≤–∞—Å –Ω–µ—Ç VPN-–∫–ª—é—á–∞. –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ –ø—Ä–æ–±–Ω—ã–π –∫–ª—é—á")
        else:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@router.callback_query(F.data == "support")
async def support_menu(callback: CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))

    await callback.message.edit_text("üìû –ú—ã –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏: @airvpnsupport", reply_markup=builder.as_markup())


# Check invite programm
async def process_successful_payment(user_id: int):
    user = User.get(telegram_id=user_id)
    if user and user.referred_by:
        inviter = user.referred_by  # –≠—Ç–æ —É–∂–µ –æ–±—ä–µ–∫—Ç User
        if inviter and not inviter.referral_bonus_active:
            logger.info(f"–ï—Å—Ç—å –∏–Ω–≤–∞–π—Ç–µ—Ä! {inviter.username}")

            if inviter.subscription_end and inviter.subscription_end > datetime.now():
                logger.info("–£ –∏–Ω–≤–∞–π—Ç–µ—Ä–∞ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞!")

                last_subscription = Subscription.get(user=inviter, end_date=inviter.subscription_end)
                if last_subscription:
                    last_subscription.end_date += timedelta(days=30)
                    inviter.subscription_end = last_subscription.end_date
                else:
                    logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –∏–Ω–≤–∞–π—Ç–µ—Ä–∞.")

                inviter.referral_bonus_active = True
                commit()

                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {inviter.telegram_id} –ø–æ–ª—É—á–∏–ª 1 –º–µ—Å—è—Ü –±–µ—Å–ø–ª–∞—Ç–Ω–æ!")
                await bot.send_message(inviter.telegram_id, "üéâ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω –±–æ–Ω—É—Å: +1 –º–µ—Å—è—Ü –∫ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–µ!")

            else:
                logger.info(f"–ò–Ω–≤–∞–π—Ç–µ—Ä {inviter.telegram_id} –Ω–µ –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏, –±–æ–Ω—É—Å –Ω–µ –Ω–∞—á–∏—Å–ª–µ–Ω.")
                await bot.send_message(inviter.telegram_id, "‚ùå –í–∞—à –±–æ–Ω—É—Å –Ω–µ –±—ã–ª –Ω–∞—á–∏—Å–ª–µ–Ω, —Ç–∞–∫ –∫–∞–∫ —É –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.")


@router.callback_query(F.data == "info")
async def info(callback: CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    await callback.message.edit_text(info_about_vpn, reply_markup=builder.as_markup())

@router.callback_query(F.data == "referral")
@db_session
async def refferal_link(callback: CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    user = User.get(telegram_id=callback.message.chat.id)
    if user:
        ref_link = f"https://t.me/@vpn_airbot?start={user.referral_code}"
        await callback.message.edit_text(f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {ref_link}\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ +1 –º–µ—Å—è—Ü –±–µ—Å–ø–ª–∞—Ç–Ω–æ", reply_markup=builder.as_markup())
    else:
        await callback.message.edit_text("–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")



@router.callback_query(F.data == "outline")
async def send_device_options(callback: CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="iOS", url="https://apps.apple.com/app/outline-app/id1356177741"),
        InlineKeyboardButton(text="Android", url="https://play.google.com/store/apps/details?id=org.outline.android.client")
    )
    builder.row(
        InlineKeyboardButton(text="PC (Windows)", url="https://getoutline.org/#download"),  # –°—Å—ã–ª–∫–∞ –¥–ª—è Windows
        InlineKeyboardButton(text="MacOS", url="https://getoutline.org/#download")  # –°—Å—ã–ª–∫–∞ –¥–ª—è MacOS
    )
    builder.row(
        InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_main")  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    )
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Outline:",
        reply_markup=builder.as_markup()
    )


# List of images
GUIDE_IMAGES = [
    './images/aaa.jpg',
    './images/abc.jpg',
    './images/bbb.jpg',
    './images/outline.jpg',
    './images/usekey.jpg',
]

# State of views
class ScreenshotState(StatesGroup):
    viewing = State()

@router.callback_query(F.data == "guide")
async def send_guide(callback: CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="üì∏ –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data="send_screenshots"))
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    builder.row(InlineKeyboardButton(text="üîó –°–∫–∞—á–∞—Ç—å Outline", callback_data="outline"))

    await callback.message.edit_text(instruction, reply_markup=builder.as_markup())


@router.callback_query(F.data == "send_screenshots")
async def start_screenshots(callback: CallbackQuery, state: FSMContext):
    if not GUIDE_IMAGES:
        await callback.message.answer("‚ö† –°–∫—Ä–∏–Ω—à–æ—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        return

    await state.set_state(ScreenshotState.viewing)
    await state.update_data(index=0)
    
    await send_image(callback.message, 0, state)


async def send_image(message: Message, index: int, state: FSMContext):
    data = await state.get_data()

    if 0 <= index < len(GUIDE_IMAGES):
        image_path = GUIDE_IMAGES[index]

        if os.path.exists(image_path):
            media_file = FSInputFile(image_path)
            keyboard = await generate_pagination_keyboard(index)

            if "message_id" in data:
                await message.bot.edit_message_media(
                    media=types.InputMediaPhoto(media=media_file),
                    chat_id=message.chat.id,
                    message_id=data["message_id"],
                    reply_markup=keyboard
                )
            else:
                sent_message = await message.answer_photo(media_file, reply_markup=keyboard)
                await state.update_data(message_id=sent_message.message_id)
        else:
            await message.answer(f"‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {image_path}")

async def generate_pagination_keyboard(index: int) -> InlineKeyboardMarkup:
    buttons = []

    if index > 0:
        buttons.append(InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"screenshot_{index-1}"))

    if index < len(GUIDE_IMAGES) - 1:
        buttons.append(InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚û°", callback_data=f"screenshot_{index+1}"))
    else:
        buttons.append(InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="done"))

    return InlineKeyboardMarkup(inline_keyboard=[buttons])

# Back and forward buttons
@router.callback_query(F.data.startswith("screenshot_"))
async def navigate_screenshots(callback: CallbackQuery, state: FSMContext):
    index = int(callback.data.split("_")[1])
    await send_image(callback.message, index, state)
    await state.update_data(index=index)


@router.callback_query(F.data == "done")
async def close_screenshots(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()

    if "message_id" in data:
        try:
            await callback.message.delete()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

    await state.clear()

    await callback.answer("üìå –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–≤–µ—Ä—à–µ–Ω!")


@router.message(F.text == "üìä –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏")
@db_session
async def handle_status(message: Message):
    user = User.get(telegram_id=message.chat.id)

    if not user:
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return

    # –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (–±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    first_subscription = user.subscriptions.order_by(lambda s: s.start_date).first()

    # –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
    subscription_end = user.subscription_end

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    invited_count = count(u for u in User if u.referred_by == user)  # ‚úÖ –¢–µ–ø–µ—Ä—å count –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω


    if subscription_end and subscription_end > datetime.now():
        status = "üü© –ê–∫—Ç–∏–≤–Ω–∞"
        sub_end_text = subscription_end.strftime("%d %B %Y")
        sub_start_text = first_subscription.start_date.strftime("%d %B %Y") if first_subscription else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        text = (
            f"üìä <b>–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
            f"üü¢ –°—Ç–∞—Ç—É—Å: {status}\n"
            f"üìÖ –ù–∞—á–∞–ª–æ –ø–æ–¥–ø–∏—Å–∫–∏: {sub_start_text}\n"
            f"üìÖ –û–∫–æ–Ω—á–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏: {sub_end_text}\n"
            f"üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {invited_count}\n"
        )
        await message.answer(text, parse_mode="HTML")

    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.")



AUTHORIZED_USER_ID = int(os.getenv("AUTHORIZED_USER_ID"))
@router.message(Command('database'))
async def handle_get_data(message: Message):
    if message.chat.id == AUTHORIZED_USER_ID:
        command_parts = message.text.split()
        if len(command_parts) == 1:
            data = await asyncio.to_thread(get_all_data) 
            await message.answer(data)
        elif len(command_parts) == 2:
           
            username = command_parts[1]
            data = await asyncio.to_thread(get_user_data, username)
            if data:
                await message.answer(data)
            else:
                await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∏–º–µ–Ω–µ–º '{username}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        else:
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /database –∏–ª–∏ /database <username>.")


@router.message(Command("get_key"))
@db_session 
async def handle_get_key(message: Message):
    if message.chat.id == AUTHORIZED_USER_ID:
        try:
            command_parts = message.text.split()
            if len(command_parts) != 2:
                await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–∏–º–µ—Ä: /get_key 123456789")
                return

            username = str(command_parts[1])

            user = User.get(username=username)

            if user:
                if user.access_key:
                    await message.reply(
                        f"VPN-–∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}:\n"
                        f"–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π:{user.access_key}\n"
                        f"–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π:{user.dynamic_key}\n"
                        f"ID –∫–ª—é—á–∞: {user.key_id}",
                    )
                else:
                    await message.reply(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç VPN-–∫–ª—é—á.")
            else:
                await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        except Exception as e:
            await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            raise


@router.message(Command("del"))
@db_session
async def restart(message: Message):
    if message.chat.id == AUTHORIZED_USER_ID:
        try:
            me = User.get(telegram_id=802171486)
            key_del = await delete_vpn_key(me.key_id)
            clear_data = await asyncio.to_thread(clear_user_data)
            await message.answer(f"{clear_data}\n–†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è –∫–ª—é—á–∞: {key_del}")

        except Exception as e:
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {e}")

@router.message(Command("send_all"))
@db_session
async def send_all(message: Message):
    if message.chat.id == AUTHORIZED_USER_ID:
        command_parts = message.text.split(maxsplit=1)
        if len(command_parts) < 2:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è. –ü—Ä–∏–º–µ—Ä: /send_all –ü—Ä–∏–≤–µ—Ç, –±—Ä–∞—Ç—å—è")
            return

        text = command_parts[1]
        failed_users = 0

        for user in User.select():  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –≤—Å–µ—Ö —Å—Ä–∞–∑—É
            try:
                await bot.send_message(user.telegram_id, text)
            except Exception as e:
                failed_users += 1
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")

        await message.reply(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—à–∏–±–æ–∫: {failed_users}")


async def main():
    try:
        start_scheduler()  # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        scheduler.start()
        await dp.start_polling(bot)  # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
    finally:
        stop_scheduler()  # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
def signal_handler(sig, frame):
    print('–ó–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É...')
    # –ó–¥–µ—Å—å –Ω–µ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å asyncio.get_event_loop().stop(), —Ç–∞–∫ –∫–∞–∫ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º async –æ–±—Ä–∞–±–æ—Ç–∫—É
    asyncio.get_event_loop().stop()

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (Ctrl+C)
signal.signal(signal.SIGINT, signal_handler)

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    asyncio.run(main())

