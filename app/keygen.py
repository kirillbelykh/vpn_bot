from logger import logger
import aiohttp
from pony.orm import db_session, commit, count 
from database import User
from servers import load_servers_from_file, save_servers_to_file, get_available_server, add_device_to_host
from datetime import datetime, timedelta
from utils import encrypt_telegram_id, update_user_data

HOSTS_FILE = "hosts.json"
CONN_NAME = "AirVPN"
DOMAIN = "e-airvpn.ru"


async def activate_trial(user_id) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–±–Ω—ã–π –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞"""
    logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é –ø—Ä–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id}")

    with db_session:
        user = User.get(telegram_id=user_id)

        if not user:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
            return "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ."

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
        if user.subscription_end and user.subscription_end > datetime.now():
            return "–í—ã —É–∂–µ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É. –ü—Ä–æ–±–Ω—ã–π –∫–ª—é—á –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–±–Ω—ã–π –∫–ª—é—á
        if user.trial_used:
            return "–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—ã–π –∫–ª—é—á. –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞."

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º VPN-–∫–ª—é—á
        dynamic_key = await generate_vpn_key(user_id)
        if not dynamic_key:
            return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ø—Ä–æ–±–Ω–æ–≥–æ –∫–ª—é—á–∞.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @airvpnsupport."

        # –ü–µ—Ä–≤—ã–º 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –¥–∞—ë–º 7 –¥–Ω–µ–π, –æ—Å—Ç–∞–ª—å–Ω—ã–º 24 —á–∞—Å–∞
        end_date = datetime.now() + timedelta(days=3)

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user.trial_end_date = end_date
        user.trial_used = True

        commit()
        return dynamic_key
    
async def generate_dynamic_key(telegram_id: int) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º telegram_id."""
    try:
        # –®–∏—Ñ—Ä—É–µ–º telegram_id
        encrypted_id = encrypt_telegram_id(telegram_id)
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∫–ª—é—á
        dynamic_key = f"ssconf://{DOMAIN}/conf/{encrypted_id}#{CONN_NAME}"
        return dynamic_key

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫–ª—é—á–∞: {e}")
        return None


async def request_access_key(api_url, headers, payload) -> dict:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç POST-–∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä Outline –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."""
    async with aiohttp.ClientSession() as session:
        try:
            async with session.post(api_url, headers=headers, json=payload, ssl=False) as response:
                response.raise_for_status() 

                data = await response.json() 
                if data:
                    logger.info("–ï—Å—Ç—å –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞")

                access_key = data.get("accessUrl")
                key_id = data.get("id")
                server_port = data.get("port")
                method = data.get("method")
                password = data.get("password")

                if not access_key or not key_id:
                    return None

                return {
                    "access_key": access_key,
                    "key_id": key_id,
                    "server_port": server_port,
                    "method": method,
                    "password": password
                }

        except aiohttp.ClientResponseError as e:
            logger.error(f"–û—à–∏–±–∫–∞ HTTP {e.status}: {e.message}")
        except aiohttp.ClientError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        except Exception as e:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

    return None  # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None

async def generate_vpn_key(user_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∫–ª—é—á —á–µ—Ä–µ–∑ –±–æ—Ç–∞"""
    try:
        logger.info(f"–ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ VPN-–∫–ª—é—á–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ –∏ –ª–æ–∫–∞—Ü–∏–∏
        servers = await load_servers_from_file('hosts.json')
        server = get_available_server(servers)
        if not server:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return None

        api_url = f"{server['api_url']}/access-keys"
        headers = {"Content-Type": "application/json"}
        payload = {"name": str(user_id)}

        access_data = await request_access_key(api_url, headers, payload)

        if not access_data:
            logger.error(f"–û—à–∏–±–∫–∞: —Å–µ—Ä–≤–µ—Ä {server['host']} –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è {user_id}")
            return None

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω—ã–µ —Ç–∏–ø—ã
        ss_data = {
            "server": str(server.get("host", "UNKNOWN_SERVER")),
            "server_port": str(access_data.get("server_port", "")),
            "password": str(access_data.get("password", "")),
            "method": str(access_data.get("method", "")),
            "key_id": int(access_data.get("key_id", 0)),
            "access_key": str(access_data.get("access_key", ""))
        }

        if not all(ss_data.values()):
            logger.error(f"–û—à–∏–±–∫–∞: –ø–æ–ª—É—á–µ–Ω—ã –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è {user_id}: {ss_data}")
            return None

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫–ª—é—á–∞
        dynamic_key = await generate_dynamic_key(user_id)

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        await update_user_data(user_id, ss_data, dynamic_key)
        
        await add_device_to_host(server["host"], +1)  # üü¢ –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        return dynamic_key

    except aiohttp.ClientError as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Outline VPN –¥–ª—è {user_id}: {e}")
        return None
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞ –¥–ª—è {user_id}: {e}", exc_info=True)
        return None


async def delete_vpn_key(key_id):
    """–£–¥–∞–ª—è–µ–º –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞"""
    try:
        logger.info(f"–ò—â—É —Å–µ—Ä–≤–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–ª—é—á–∞ —Å ID {key_id}...")

        with db_session:
            user = User.get(key_id=key_id)
            if not user:
                logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                return False

            vpn_key_id = user.key_id
            if not vpn_key_id:
                logger.error(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id} –Ω–µ—Ç —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ VPN-–∫–ª—é—á–∞.")
                return False

            host = user.host  
            if not host:
                logger.error(f"–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω —Å–µ—Ä–≤–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–ª—é—á–∞.")
                return False

        servers = await load_servers_from_file('hosts.json')
        if not servers:
            logger.info("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–ª—é—á–∞.")
            return False

        server = next((s for s in servers if s['host'] == host), None)
        if not server:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–µ—Ä–≤–µ—Ä —Å IP {host} –≤ —Å–ø–∏—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–æ–≤.")
            return False

        api_url = f"{server['api_url']}/access-keys/{vpn_key_id}"
        headers = {"Content-Type": "application/json"}

        async with aiohttp.ClientSession() as session:
            try:
                logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ DELETE –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä Outline –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–ª—é—á–∞ {vpn_key_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}...")
                async with session.delete(api_url, headers=headers, ssl=False) as response:
                    if response.status == 204:  
                        logger.info(f"–ö–ª—é—á {vpn_key_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
                        
                        server['current_devices'] -= 1
                        await save_servers_to_file('hosts.json', servers)

                        with db_session:
                            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            user = User.get(key_id=key_id)
                            if user:
                                # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ VPN-–∫–ª—é—á–∞, –Ω–æ –Ω–µ —Ç—Ä–æ–≥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
                                user.access_key = None
                                user.key_id = None
                                user.host = None
                                user.server_port = None
                                user.password = None
                                user.method = None

                                commit()

                        return True
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª—é—á–∞: {response.status} {await response.text()}")
            except aiohttp.ClientError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ DELETE –∑–∞–ø—Ä–æ—Å–∞: {e}")

    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")

    return False